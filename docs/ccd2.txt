
                          IRAF TUTORIAL SESSIONS

                                Exercise 3.


This exercise is similar to Exercise 2., except that in this exercise we are
going to deal with spectroscopic data.  We will do the preliminary data
reductions using tasks in the CCDRED and TWODSPEC.LONGSLIT packages.  The data
that we will be using were taken on Kitt Peak at the Coude Feed telescope by
Dr. Philip Massey. 

We will assume that you are logged into IRAF in an xgterm window, or a similar
graphics terminal emulator window.  If an image display window such as
ximtool is open we will also display some data frames.

Go to your IRAF home directory and then CD to the directory containing the
spectroscopic data.  After unpacking the data with RFITS, look at the headers - 
there should be ten bias frames, three sky flats, four quartz lamps to be used
as flat field frames (called just flats to distinguish them from the sky flats),
two comparison lamps, and several object frames.

          cl> cd
          cl> cd exercises/spec
          cl> unlearn rfits
          cl> rfits fsp* "" junk old+
          cl> dir
          cl> imhead sp*.imh

Load the CCDRED package.

          cl> package
          cl> ????                    # do you remember what packages need to
                                        be loaded to find the ccdred package?

We will use the keywords and their values in the image headers to help us
process the data using the task CCDPROC.  All of our sample data were taken
at the same grating tilt so we do not need to worry about a "subset" keyword
as we did in the previous exercise (although the Coude enters a keyword
called GRATPOS for this purpose).

          cl> unlearn ccdred           # do you remember what this does?
          cl> imhead sp0020 l+
          cl> ccdlist sp*.imh

Notice that we really do not need to run SETINSTRUMENT in order for the
keywords and values in the image headers to be recognized by the package, i.e.,
no translation file is needed.  The image headers contain the parameters and
values expected by the package.  But we still may want to do this anyway, since
SETINSTRUMENT also runs a script file that sets up default parameters for the
task CCDPROC.

          cl> dir ccddb$kpno           # notice the *.cl files
          cl> type ccddb$kpno/coude.cl
          cl> setinstrument
              ?
              coude

          [we are now looking at the package parameters for CCDRED - there
           is nothing to change here - type :q]
 
          [now we are looking at the parameters for the task CCDPROC - there
           is nothing to modify at this time - notice the processing steps
           that we will do for these data - "flatcor" has been set to "no"
           for now - type :q]

Remember that this time we have 10 bias frames.  We need to combine those
into a single frame.  Let's do that next.  I think the parameters for 
ZEROCOMBINE, the task we will use to do this combining, are just fine.  The
frames will be averaged, rejecting the highest value for each pixel position.

          cl> lpar zerocombine

My parameters looked like this.

cl> lpar zerocombine
        input =                 List of zero level images to combine
      (output = "Zero")         Output zero level name
     (combine = "average")      Type of combine operation
      (reject = "minmax")       Type of rejection
     (ccdtype = "zero")         CCD image type to combine
     (process = no)             Process images before combining?
      (delete = no)             Delete input images after combining?
     (clobber = no)             Clobber existing output image?
       (scale = "none")         Image scaling
     (statsec = "")             Image section for computing statistics
        (nlow = 0)              minmax: Number of low pixels to reject
       (nhigh = 1)              minmax: Number of high pixels to reject
       (nkeep = 1)              Minimum to keep (pos) or maximum to reject (neg
       (mclip = yes)            Use median in sigma clipping algorithms?
      (lsigma = 3.)             Lower sigma clipping factor
      (hsigma = 3.)             Upper sigma clipping factor
     (rdnoise = "0.")           ccdclip: CCD readout noise (electrons)
        (gain = "1.")           ccdclip: CCD gain (electrons/DN)
      (snoise = "0.")           ccdclip: Sensitivity noise (fraction)
       (pclip = -0.5)           pclip: Percentile clipping parameter
       (blank = 0.)             Value if there are no pixels
        (mode = "ql")      

Notice that we can use all of the sp*.imh images as input to this task.  
ZEROCOMBINE will only process the "zero" frames.

          cl> zerocombine sp*.imh

Running IMSTATISTICS on the raw biases and the combined bias will show that
we have indeed improved our noise statistics.

          cl> imstat sp000?.imh,sp0010,Zero
          cl> display Zero 1 fill+            # why fill+ ?
          cl> implot Zero

Now we need to determine the overscan region and the trim parameters for these
data.  Look at one of the flats to determine this information.

          cl> implot sp0014

The overscan region is in the last 32 columns.  Expand the region and 
determine the columns you want to use.  I used 105-130.  What do you
think?

When you determine the trim parameters it is important that you only keep
that part of the image where there is actual signal.  I chose 34-74
for the columns and 1-1022 for the rows.  What about you?  Look at several
different rows scattered over the length of the image.

I just bet these values are different than what is in the image header
for the BIASSEC and TRIMSEC keywords, but you may want to check anyway.

           cl> imhead sp0020 l+

Now we are ready to EPAR the task CCDPROC and set the "biassec" and 
"trimsec" parameters, and to identify the "zerocor" image.  We will leave
"ccdtype" set to the null character so that all images in the input list will
be processed.

           cl> epar ccdproc

This is what my parameter file looked like.

cc> lpar ccdproc
       images = ""              List of CCD images to correct
     (ccdtype = "")             CCD image type to correct
   (max_cache = 0)              Maximum image caching memory (in Mbytes)
      (noproc = no)             List processing steps only?\n
      (fixpix = no)             Fix bad CCD lines and columns?
    (overscan = yes)            Apply overscan strip correction?
        (trim = yes)            Trim the image?
     (zerocor = yes)            Apply zero level correction?
     (darkcor = no)             Apply dark count correction?
     (flatcor = no)             Apply flat field correction?
    (illumcor = no)             Apply illumination correction?
   (fringecor = no)             Apply fringe correction?
     (readcor = no)             Convert zero level image to readout correction?
     (scancor = no)             Convert flat field image to scan correction?\n
    (readaxis = "line")         Read out axis (column|line)
     (fixfile = "")             File describing the bad lines and columns
     (biassec = "[105:130,1:1022]") Overscan strip image section
     (trimsec = "[34:74,1:1022]") Trim data section
        (zero = "Zero")         Zero level calibration image
        (dark = "")             Dark count calibration image
        (flat = "")             Flat field images
       (illum = "")             Illumination correction images
      (fringe = "")             Fringe correction images
  (minreplace = 1.)             Minimum flat field value
    (scantype = "shortscan")    Scan type (shortscan|longscan)
       (nscan = 1)              Number of short scan lines\n
 (interactive = yes)            Fit overscan interactively?
    (function = "chebyshev")    Fitting function
       (order = 1)              Number of polynomial terms or spline pieces
      (sample = "*")            Sample points to fit
    (naverage = 1)              Number of sample points to combine
    (niterate = 1)              Number of rejection iterations
  (low_reject = 3.)             Low sigma rejection factor
 (high_reject = 3.)             High sigma rejection factor
        (grow = 0.)             Rejection growing radius
        (mode = "ql")  

Now we are ready to combine our flats - there are four of them.  We will
use FLATCOMBINE to do this; we will process the images before we combine
them, however.  That is why we needed to setup the parameters for CCDPROC
first.  FLATCOMBINE will run CCDPROC on our flats when "process=yes". 
Overplot the flats first to see how they look and then EPAR the task
FLATCOMBINE to look like my set of parameters below.  Let's use
the "crreject" rejection algorithm that requires the "rdnoise" and "gain"
parameters (that just happen to be in our headers).

           cl> implot sp0014
               :i sp0015
               o
               :l 512
               :i sp0016
               o
               :l 512
               :i sp0017
               o
               :l 512
               q
           cl> imhead sp0014 l+       # see readnoise and gain in header
           cl> phelp combine          # FLATCOMBINE is really a script calling
                                        the task COMBINE
           cl> epar flatcombine

My parameter file looked like this.

cl> lpar flatcombine
        input =                 List of flat field images to combine
      (output = "Flat")         Output flat field root name
     (combine = "average")      Type of combine operation
      (reject = "crreject")     Type of rejection
     (ccdtype = "flat")         CCD image type to combine
     (process = yes)            Process images before combining?
     (subsets = no)             Combine images by subset parameter?
      (delete = no)             Delete input images after combining?
     (clobber = no)             Clobber existing output image?
       (scale = "mode")         Image scaling
     (statsec = "")             Image section for computing statistics
        (nlow = 1)              minmax: Number of low pixels to reject
       (nhigh = 1)              minmax: Number of high pixels to reject
       (nkeep = 1)              Minimum to keep (pos) or maximum to reject (neg
       (mclip = yes)            Use median in sigma clipping algorithms?
      (lsigma = 3.)             Lower sigma clipping factor
      (hsigma = 3.)             Upper sigma clipping factor
     (rdnoise = "rdnoise")      ccdclip: CCD readout noise (electrons)
        (gain = "gain")         ccdclip: CCD gain (electrons/DN)
      (snoise = "0.")           ccdclip: Sensitivity noise (fraction)
       (pclip = -0.5)           pclip: Percentile clipping parameter
       (blank = 1.)             Value if there are no pixels
        (mode = "ql")  


Now run FLATCOMBINE.

           cl> flatcombine sp*.imh
           cl> imhead Flat
           cl> implot Flat

Now we are ready to process our sky flats, objects, and comps - at least
subtract the overscan, trim, and zero correct them.

           cl> files sp*.imh > plist
           cl> imhead @plist
           cl> edit plist               # delete biases and flats from plist
           cl> ccdlist @plist
           cl> ccdproc @plist

           [when you get tired of looking at the overscan plot type "NO" 
            when you are asked if you want to fit it interactively.]

           cl> ccdlist @plist           # notice reduction flags
           cl> imhead sp0025 l+         # notice reduction history

Now we are ready to look at the flat fielding for this data set.  Up until
now, the processing has been quite similar to what we did earlier, just 
a little more complex.

One way to generate a normalized flat field for spectroscopic data is to
use the task RESPONSE in the TWODSPEC.LONGSLIT package.  In our case, all
of the columns for the flat will be summed together, we will fit this sum
with a function, and that function will then be divided into each column
of the input flat.  This will produce our response function.  The task
RESPONSE uses the Interactive Curve Fitting (ICFIT) routine that is used
throughout the NOAO reduction tasks.

           cl> twodspec
           cl> longslit
           cl> unlearn response
           cl> phelp response
           cl> lpar response
           cl> response Flat Flat Resp
           
           [the dispersion will be along the columns = 2]

               ?                     # look at cursor options
               :function cheby
               :order 5
               f
               k
               h
               q
           cl> implot Resp

The next step is to check our sky flats to see if there is any slit function.
We want to remove any slope that may appear perpendicular to the dispersion.
So we need to combine our sky flats and then divide that result by our response
function.  If there is any slope we can remove this by running the task
ILLUMINATION and creating an illumination function.

           cl> lpar combine
           cl> combine sp0011,sp0012,sp0013 Sky reject=crreject \
               scale=mode weight=!exptime rdnoise=rdnoise gain=gain
           cl> implot Sky
           cl> unlearn imarith
           cl> imarith Sky / Resp SkyFlat
           cl> display SkyFlat 1 fill+
           cl> implot SkyFlat
               :l 200 600
               q

There does appear to be a star in our SkyFlat (seen in both the displayed
image and in the plot), but even so, I do see a small slope that perhaps 
we should attempt to remove.  The ILLUMINATION task allows us to describe 
a function for the slit profile.  This is done by first dividing the spectrum 
into bins along the wavelength direction;  these bins are then summed 
perpendicular to the dispersion and fit with a function; these functions 
are then normalized and expanded to full frame.  When this illumination 
function is divided into our data it should flatten the sky perpendicular 
to the dispersion.  The ILLUMINATION task first lets us mark our bins and 
then we drop into the ICFIT routine to do the individual fits to each bin.

           cl> phelp illumination
           cl> unlearn illumination
           cl> lpar illum
           cl> illum SkyFlat Illum

           [the default 5 bins is probably ok - type "q" to continue]

           [now we need to fit the first bin - notice the star - we can
           eliminate the star from the fit by twiddling parameters]

               ?                       # display cursor options
               :function cheby
               :order 2                # straight line
               :high 1                 # set sigma rejection to 1
               :grow 2                 # radius of pixel rejection
               :niterate 2             # iterate the solution
               f                       # fit new parameters
               q                       # accept and go to next bin

           [continue for all bins]
               
           cl> implot Illum
           cl> imarith SkyFlat / Illum test   # does Illum work ?
           cl> implot test                    # look at various lines

We will assume that our Illum frame is ok.  Since our sample stars are
bright with little sky background we can not confirm this assumption
very well - checking this function on an object with lots of sky counts
would be preferable.

Now we have a response and an illumination function.  Both will need to
be divided into our object and comp frames.  We can save some steps by
first multiplying these functions together and then running CCDPROC doing just
the "flatcor" correction.

           cl> imarith Resp * Illum SuperFlat
           cl> implot SuperFlat
               :l 200 300
               :i Resp
               o
               :l 200 300              # compare Resp with SuperFlat
           cl> epar ccdproc
           
           [set "flatcor=yes" and  "flat=SuperFlat" - it should not be
            necessary to modify anything else]

           cl> ccdproc @plist
           cl> imhead sp0020 l+        # notice record of reduction steps

We have now completed the preliminary reductions on our spectral data, and
they are ready for further processing.  Exercise 5. continues with extraction
and wavelength calibration steps.  If diskspace is needed, all images
in this directory can now be deleted EXCEPT for sp0018-27 - these are
the objects and comps that you may use later.

           cl> imdel *.imh ver+


-------------------------------------------------------------------------------

                                References

Type "help ccdred" to see a list of the tasks in this package.  Each task
has an online help page.  Also see the list of "Additional Help Topics".

There is online help for both RESPONSE and ILLUMINATION.
 
A User's Guide to CCD Reductions with IRAF, by Phil Massey, February 1997.
 
A User's Guide to Reducing Slit Spectra with IRAF, by Phil Massey, Frank
Valdes, Jeannette Barnes, April 1992.

------------------------------end of exercise-----------------------------------
