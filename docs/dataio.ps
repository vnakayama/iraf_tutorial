%!PS-Adobe-3.0
%%Creator: enscript
%%For: SunOS:jbarnes (J Barnes)
%%Title: dataio.txt
%%CreationDate: Tue Oct  7 07:09:03 1997
%%DocumentNeededResources: font Courier-Bold Courier
%%Pages: (atend)
%%BeginProlog
% Start of enscript.pro -- prolog for text file translator
% Copyright (c) 1984,1985,1987 Adobe Systems Incorporated. All Rights Reserved. 
% GOVERNMENT END USERS: See Notice file in TranScript library directory
% -- probably /usr/lib/ps/Notice
% RCSID: $Header: /disks/hobo/vp6/snichols/rel4.0/src/transcript/lib/RCS/enscript.pro,v 4.0 1992/08/21 15:38:20 snichols Exp $
/$enscript 50 dict def $enscript begin
/S/show load def
/bd { bind def } bind def
/X{exch 0 rmoveto S} bd
/Y{exch 0 exch rmoveto S} bd
/B{3 1 roll moveto S} bd
/F{$fd exch get setfont} def
/U{1440 mul}def
/UP{U 72 div}def
/StartPage{/svpg save def .05 dup scale} bd
/EndPage{svpg restore showpage} bd
/DoPreFeed{/statusdict where{pop
 statusdict/prefeed known{statusdict exch/prefeed exch put 0}if}if pop} bd
/SetUpFonts
 {dup/$fd exch array def{findfont exch scalefont $fd 3 1 roll put}repeat}def
/InitGaudy{/Columns exch def
 /ftD /Times-Bold findfont 12 UP scalefont def
 /ftF /Times-Roman findfont 14 UP scalefont def
 /ftP /Helvetica-Bold findfont 30 UP scalefont def} bd
/LB{/pts exch UP def /charcolor exch def /boxcolor exch def /font exch def
 /label exch def /dy exch def /dx exch def /lly exch def /llx exch def
 gsave boxcolor setgray
 llx lly moveto dx 0 rlineto 0 dy rlineto dx neg 0 rlineto closepath fill
 /lines label length def
 /yp lly dy add dy lines pts mul sub 2 div sub pts .85 mul sub def
 font setfont charcolor setgray
 label {dup stringwidth pop 2 div llx dx 2 div add exch sub yp moveto show
   /yp yp pts sub def}forall grestore} bd
/Gaudy{/plength exch def /BarLength exch def /hy exch def /hx exch def
 /Page exch def /Date exch def  /File exch def /Comment exch def
 hx hy  BarLength 144 sub .25 U [File] ftF .97 0 14 LB
 hx hy 360 add BarLength 144 sub .25 U [Comment] ftF 1 0 14 LB
 hx hy 1 U .5 U Date ftD .7 0 12 LB
 BarLength 1080 sub hy 1 U .5 U [Page] ftP .7 1 30 LB
 2 1 Columns {1 sub plength Columns div mul 172.80 sub hy moveto 0 0 hy sub rlineto
 stroke}for } bd
/Landscape { 90 rotate 0 exch translate } bd
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
1    200.000 /Courier-Bold
%%IncludeResource: font Courier
0    140.000 /Courier
2 SetUpFonts
%%EndSetup
%%Page: ? 1
StartPage
-12240 Landscape
1 F
360 11530 (dataio.txt        Sat Sep 27 12:10:06 1997        1)B
0 F
2544 11050(IRAF TUTORIAL SESSIONS)B
3048 10730(Exercise 6.)B
360 10250(In this exercise we will acquaint you with some IRAF tools for reading)B
360 10090(and writing data to tape and disk.  We will assume that you are logged into)B
360 9930(IRAF in an xgterm window, or a similar graphics terminal emulator window.)B
360 9610(Go to your IRAF home directory and then go to the subdirectory called dataio)B
360 9450(in the exercises directory.)B
1200 9130(cl> cd)B
1200 8970(cl> cd exercises/dataio)B
360 8650(As in the previous exercises, some images exist in this directory as FITS )B
360 8490(files, the standard format for the transporting of astronomical image data.)B
360 8330(Although the IRAF image format was made host independent with IRAF V2.11, it)B
360 8170(is not necessarily a good format for data exchange.  Thus the usual way to )B
360 8010(import/export data to/from IRAF is through the FITS format.  Two tasks in )B
360 7850(the DATAIO package are used for this purpose, RFITS and WFITS.  Let's convert )B
360 7690(our FITS files to the IRAF image format.  The "old+" parameter restores the )B
360 7530(IRAF image name to the previous name that it had on disk if the FITS image )B
360 7370(was written with WFITS in IRAF.  Otherwise the specified output image name )B
360 7210(is used.)B
1200 6890(cl> dir)B
1200 6730(cl> unlearn dataio        # unlearn all tasks in DATAIO package)B
1200 6570(cl> lpar rfits)B
1200 6410(cl> rfits fits* "" junk old+)B
1200 6250(cl> imhead *.imh)B
360 5930(Both RFITS and WFITS support the reading and writing of data to disk or tape,)B
360 5770(as shown in the previous RFITS example.  Let's use WFITS to write an IRAF)B
360 5610(image to a FITS image on disk, and then look at the FITS header with RFITS.)B
1200 5290(cl> lpar wfits)B
1200 5130(cl> wfits sp0027.ms ftest )B
1200 4970(cl> rfits ftest.fits "" make- long+ | page)B
360 4650(Both of these tasks are quite clever.  RFITS creates an IRAF image on output)B
360 4490(with a pixel type that is compatible with the way the data was stored in)B
360 4330(the FITS image.  So if the FITS image contains 16-bit unscaled data then)B
360 4170(the default IRAF image will contain 16-bit data \(short\).  If the FITS image )B
360 4010(contains scaled data or IEEE formatted data then the resultant IRAF image)B
360 3850(will be 32-bit floating point \(real\).   WFITS will write 16-bit unscaled data)B
360 3690(to the FITS image if the IRAF image contains 16-bit \(short\) data.  If the)B
360 3530(IRAF image contains 32-bit \(real\) data then WFITS will write IEEE formatted)B
360 3370(data to the FITS file.  These defaults can be overridden, of course, but it)B
360 3210(is rarely necessary or advised to do so.)B
360 2890(Tape drives are generally known to IRAF as mta, mtb, etc.  These names)B
360 2730(are defined in the dev$tapecap file that was configured for your site.  We)B
360 2570(will use mta throughout this exercise to refer to a tape drive - you may)B
360 2410(need to substitute the correct name for the drive you are using.  If your)B
360 2250(tape drive is on another machine and available through IRAF networking then)B
360 2090(you need to address the drive as node!mta, where node is the name of the)B
360 1930(host machine.)B
1200 1610(cl> allocate mta          # now load a scratch tape in the drive)B
1200 1450(cl> rewind mta            # rewinds the tape)B
1200 1290(cl> devstatus mta         # gives status of tape)B
360 970(Let's write all of the images in the this directory to tape.  We will use)B
360 810(the defaults for WFITS.  Note the terminal output during the writing of)B
360 650(each image that describes the output format.  The data written with )B
7920 11210("bitpix=16" and no scaling is written as 16-bit integer data on the tape;)B
7920 11050(the data described with "bitpix=-32" is written as IEEE floating point)B
7920 10890(data in the FITS image.  Compare this output to the pixel types noted)B
7920 10730(in the IMHEADER output for these same images.)B
8760 10410(cl> lpar wfits)B
8760 10250(cl> imhead *.imh)B
8760 10090(cl> wfits *.imh mta new+)B
7920 9770(Now write one image to tape forcing the data to be scaled to fit the full)B
7920 9610(dynamic range of 16-bits.  The scaling parameters are written to the FITS)B
7920 9450(header so the data can later be restored to the original values when it is)B
7920 9290(read back in.)B
8760 8970(cl> wfits sp0023 mta new- bitpix=16)B
7920 8650(IRAF keeps track of the tape position internally.  A double EOF is left)B
7920 8490(on the tape at the completion of each tape writing command.  We should now )B
7920 8330(have 6 FITS files on the tape;  we will actually be positioned at file 7 )B
7920 8170(because of the double EOF left by the last WFITS command.)B
8760 7850(cl> devstatus mta)B
7920 7530(We can examine the contents of the tape with the task MTEXAMINE.  The default)B
7920 7370(parameters will dump out the record structure for each file on the tape. In)B
7920 7210(our second execution we will dump the 1st record of the 4th file out in ASCII)B
7920 7050(format \(quit the paging with a "q" once you have seen the header information\).)B
7920 6890(After this task execution the tape is now positioned at file 5.)B
8760 6570(cl> lpar mtexamine)B
8760 6410(cl> mtex mta)B
8760 6250(cl> mtex mta file=4 du+ rec=1 out=c | page)B
8760 6090(cl> devstatus mta)B
7920 5770(We can list the data on the FITS tape using the RFITS command.)B
8760 5450(cl> rfits mta 1-99 make-)B
8760 5290(cl> rfits mta 1-99 make- old+)B
7920 4970(We can also look at the FITS headers of files on the tape.  Let's look at)B
7920 4810(the FITS header for the last image we wrote to tape.  Note the BSCALE and)B
7920 4650(BZERO keywords.)B
8760 4330(cl> rfits mta 6 make- long+ | page)B
7920 4010(We can certainly read all of the data back onto disk, or we can select)B
7920 3850(particular files.)B
8760 3530(cl> rfits mta 2,5-6 x)B
8760 3370(cl> dir *.imh)B
8760 3210(cl> imstat x0002,sp0023   # as a check)B
7920 2890(FITS files, or any type of files for that matter, can be read directly onto )B
7920 2730(disk with the task T2D.)B
8760 2410(cl> lpar t2d)B
8760 2250(cl> t2d mta t 1-2)B
8760 2090(cl> dir)B
8760 1930(cl> rfits t00? "" make-)B
7920 1610(IRAF tasks are now able to read and write FITS images directly, but except)B
7920 1450(for RFITS, the tasks will only recognize these FITS images if they have)B
7920 1290(an extension, like .fits.  The task RENAME will permit us to add an )B
7920 1130(extension to the t00? files that we just read in with T2D.)B
8760 810(cl> rename t00? fits field=extn)B
8760 650(cl> dir t00*)B
EndPage
%%Page: ? 2
StartPage
-12240 Landscape
1 F
360 11530 (dataio.txt        Sat Sep 27 12:10:06 1997        2)B
0 F
360 11050(We can also read the same data set from tape with RFITS, creating FITS files)B
360 10890(rather than native IRAF image files \(.imh files\) by setting the IRAF )B
360 10730(environment variable "imtype" to "fits".  This tells IRAF that all output )B
360 10570(files are now supposed to be FITS files.  The default value for imtype is imh.)B
360 10410(Since imtype is defined when an executable is called and IRAF caches )B
360 10250(executables, you will need to refresh/flush the process cache when you change )B
360 10090(imtype.  RFITS will add the .fits extensions automatically.)B
1200 9770(cl> show imtype)B
1200 9610(cl> set imtype=fits)B
1200 9450(cl> flpr)B
1200 9290(cl> rfits mta 1-2 f)B
1200 9130(cl> dir f00*)B
1200 8970(cl> set imtype=imh)B
1200 8810(cl> flpr)B
360 8490(Sometimes you may want to convert an IRAF image file into a ASCII file.  This)B
360 8330(can be done with the task WTEXTIMAGE.  The task RTEXTIMAGE will convert an)B
360 8170(ASCII file into an IRAF image file.  Text files can be written to tape with)B
360 8010(the task WCARDIMAGE.)B
1200 7690(cl> lpar wtextimage)B
1200 7530(cl> wtextimage sp0027.ms sp.txt )B
1200 7370(cl> page sp.txt)B
1200 7210(cl> lpar rtextimage)B
1200 7050(cl> rtextimage sp.txt sp dim=1022,1)B
1200 6890(cl> imhead sp,sp0027.ms)B
1200 6730(cl> imstat sp,sp0027.ms)B
1200 6570(cl> wcardimage sp.txt mta new- det-)B
1200 6410(cl> devstatus mta)B
360 6090([We normally do not advocate mixing data formats on a tape, but in this case)B
360 5930(we did not want to overwrite the FITS files just in case you wanted to play a)B
360 5770(bit more with the data.])B
360 5450(A complete listing of the tasks in the DATAIO package can be looked at)B
360 5290(with the help facility.  One task that we did not work with was REBLOCK.  )B
360 5130(One little advertised use of REBLOCK is for copying tapes.  It can also be)B
360 4970(used to read FITS files directly onto disk, using RENAME to add the .fits)B
360 4810(extensions.)B
1200 4490(cl> help dataio)B
360 4170(Once you have finished working with this tape then deallocate the drive)B
360 4010(so others may use it.)B
1200 3690(cl> deallocate mta)B
360 3370(One CAUTION to users:  Since IRAF has its own mechanism for keeping track)B
360 3210(of the tape position, it is advised to always REWIND the tape from within IRAF)B
360 3050(before removing a tape and inserting a new one.  This can be done equally)B
360 2890(as well with DEALLOCATE/ALLOCATE since DEALLOCATE also rewinds the tape.)B
360 2570(We have created some rather large files on disk during this exercise so be)B
360 2410(sure to clean up your directory with DELETE and IMDELETE after you are)B
360 2250(finished.)B
360 1770(--------------------------------------------------------------------------------)B
3048 1450(References)B
360 1130(A Beginner's Guide to Using IRAF, by Jeannette Barnes, August 1993.)B
360 810(FITS: A Flexible Image Transport System, Wells, D.C., Greisen, E.W., and )B
360 650(Harten, R.H., 1981, Astronomy and Astrophysics Supplement Series 44, 363)B
7920 11050(IEEE Standard for Binary Floating-Point Arithmetic, IEEE Standards Board,)B
7920 10890(American National Standards Institute, ANSI/IEEE Std 754-1985)B
7920 10570(-------------------------------end of exercise---------------------------------)B
EndPage
%%Trailer
end
%%Pages: 2
