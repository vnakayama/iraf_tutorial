
                          IRAF TUTORIAL SESSIONS

                                 Exercise 2.


This exercise is designed to show you how IRAF deals with the preliminary
reductions of CCD data, including the overscan subtraction, the bias or
zero level subtraction, the dark subtraction, and the flat fielding.  The
images for this exercise are direct imaging data taken at the Kitt Peak
National Observatory by Dr. George Jacoby.  Spectroscopic reductions are 
similar but the flat fielding is often done differently.  Exercise 3. deals 
with some spectroscopic data.  This exercise assumes that you have worked
through Exercise 1. and feel comfortable with the basics of IRAF.

We will approach this exercise from two different paths.  The first path
is the "long" approach to the problem, but will allow you to step through
this process one task at a time.  The second path is the preferable way to
do these preliminary reductions but for the first time user the actual
steps may not be obvious.

We will assume that you are logged into IRAF in an xgterm window, or a similar
graphics terminal emulator window.  It can be helpful to also display
images using the ximtool window for this exercise.

Go to your IRAF home directory and then go to the subdirectory called phot
in the exercises directory.

          cl> cd
          cl> cd exercises/phot

We will need to first unpack the images using the RFITS task.

          cl> unlearn rfits
          cl> rfits fm92* "" junk old+

There should be some IRAF images in this directory called m92*.imh.  There
should be a bias frame as well as two flat fields and four images all taken
through either V or B filters.

          cl> dir
          cl> imhead m92*.imh

The bias frame is an average of 25 frames.  This is done to minimize the
noise.  Each flat is an average of 5 frames to improve the signal to noise.
Notice that the pixel type is "short" or 16-bit data.

PATH 1.
-------

The first step would be to average the bias frames.  This can be done
with the task IMCOMBINE in the IMAGES.IMMATCH package.  We would then do the 
same for the flats.  Some type of pixel rejection could be used during this 
step to eliminate bad pixels or cosmic rays.  Since these steps have already 
been done for us we can continue on to the overscan subtraction.

We need to determine two things at this point:  the overscan region to 
subtract and the trimming parameters to determine the output image size.  For
this chip the overscan region is 32 columns but we often do not use all of the
columns.  The overscan region and any bad rows or columns along the edges of 
the frame are then trimmed from the image to produce our output image.  We
determine these parameters with IMPLOT, using one of the flat field frames.

          cl> display m92006 1
          cl> implot m92006

Determine the columns to use for the overscan.  I found using e, :l n m,
:c n m, and C to be very helpful. Try to avoid using the sloping part of the
overscan.  You will need to expand the plot around the overscan region.  Once
you have determined the columns to use for the overscan, plot the average of
these columns.  What columns did you decide to use?  I like columns 335-350;
are yours close to those values?  Write down your column numbers.

Now decide what columns and rows will be included in our output image.  Plot
several rows and columns and see what these values should be.  Again you 
will need to expand the plot.  Look at the rows first - do you see any bad
columns at the left edge - what about the right edge?  We certainly want
to trim off the overscan plus a bad column or two on the right edge of the plot.
Then look at some columns.  There appear to be some bad rows there as well.
Expand each edge and determine the usable range of rows.  

The values that I determined for the trimming parameters are 1-318 for the
columns, and 2-510 for the rows.  Do you agree?

Once we have this information we are ready to do the overscan subtraction
and trimming.  Load the packages.  And then edit the task COLBIAS to reflect
the values that we determined.

          cl> noao
          cl> imred
          cl> bias
          cl> phelp colbias
          cl> unlearn colbias       # what does this do?
          cl> epar colbias          # do you remember that you can save
                                      the changes with :q?

Running LPAR on COLBIAS should show parameters similar to the following:

cl> lpar colbias
        input = "m92*.imh"      Input images
       output = "%m%tr%92*.imh" Output images
        (bias = "[335:350,2:510]") Bias section
        (trim = "[1:318,2:510]") Trim section
      (median = no)             Use median instead of average in column bias?
 (interactive = yes)            Interactive?
    (function = "chebyshev")    Fitting function
       (order = 1)              Order of fitting function
  (low_reject = 3.)             Low sigma rejection factor
 (high_reject = 3.)             High sigma rejection factor
    (niterate = 1)              Number of rejection iterations
    (logfiles = "")             Log files
    (graphics = "stdgraph")     Graphics output device
      (cursor = "")             Graphics cursor input
        (mode = "ql")           


Notice that the overscan and trim values are entered as "image sections",
the x-range and y-range in square brackets.  The trim section is that part
of the image we wish to keep.

Do you understand the output image names?  Try the following to see what
the actual names on output will be.  The task SECTIONS can be used to test
image templates. In this case, the % sign brackets that part of the image
name we wish to replace (m) and what we wish to replace it with (tr).

          cl> sections %m%tr%92*.imh

So, I think we are ready to execute COLBIAS - this task will subtract the 
overscan from each image and then trim the image according to our 
specifications.  Since the task is being run interactively we will first 
see a plot of the average of the overscan vector; we could modify the fitting 
parameters at this time but we like to use a straight line for these data -
notice the fitting parameters at the top of the plot.  A return is sufficient 
for the task queries - type q in plot mode to continue.

          cl> colbias
          cl> dir
          cl> imhead tr*.imh           # notice the new size of these images
          cl> implot tr92007           # check your flat

The next step is to subtract the bias or zero frame from each of the
images.  This is best done with IMARITH.  Let us first create a file with
a list of the images to process; we will use this as input and output to
IMARITH, overwriting our input data.

          cl> files tr*.imh > zlist
          cl> edit zlist               # delete bias frame from list
          cl> imhead @zlist
          cl> unlearn imarith
          cl> epar imarith

If you do LPAR on IMARITH your parameter file should look like the following.

cl> lpar imarith
     operand1 = "@zlist"        Operand image or numerical constant
           op = "-"             Operator
     operand2 = "tr92001"       Operand image or numerical constant
       result = "@zlist"        Resultant image
       (title = "")             Title for resultant image
     (divzero = 0.)             Replacement value for division by zero
     (hparams = "")             List of header parameters
     (pixtype = "")             Pixel type for resultant image
    (calctype = "")             Calculation data type
     (verbose = yes)            Print operations?
       (noact = no)             Print operations without performing them?
        (mode = "ql")           

Execute IMARITH.

          cl> imarith

At this time, any dark subtraction would be done.  That would be done
using the task DARKSUB in the NOAO.IMRED.GENERIC package.  The frames
need to be scaled by exposure time before the subtraction is done, so
this information would need to be in the header.  We have no dark frames
so we will skip this step.

We finally arrive at the flat fielding stage.  We have two flats and they
need to be normalized before we divide them into our object frames.  
We will use IMSTATISTICS to determine the normalization value for each flat,
and then use IMARITH to create the normalized flats.

          cl> phelp imstatistics
          cl> imstat tr92006,tr92007 fields="image,mode"
          cl> imarith tr92006 / 1313 Bflat
          cl> imarith tr92007 / 1468 Vflat
          cl> implot Bflat                  # also check Vflat
          cl> display Bflat 1               # also look at Vflat

Now we can divide each of the object frames by the appropriate flat.  It is
your responsible to substitute in the correct image names for the ????.  Why
does it require two executions of IMARITH?

          cl> imhead tr*.imh
          cl> imarith tr92010,tr92011 / ??? n92010,n92011
          cl> imarith tr92014,tr92015 / ??? ?????????????
          cl> imhead n92*.imh

Look at these final images with DISPLAY and/or IMPLOT.  Check to see if 
the sky is flat across the image.  Sometimes the dome flats are not 
sufficient for flattening images - additional sky flats may need to be used.
See the task MKSKYFLAT in the CCDRED package.

At this point we may want to delete the results since we are going to
reprocess the raw data again, but using the other path.

          cl> imdelete tr*.imh,n92*.imh,Bflat,Vflat ver+
          cl> del zlist
          cl> imhead m92*.imh

PATH 2.
-------

Let's check to see what files are in our directory.

          cl> imhead m92*.imh

We want to use the tasks in the CCDRED package now to reduce these same data.
This is a much more streamlined technique.  Check to see what packages
are loaded.  Load the necessary packages - CCDRED is in NOAO.IMRED.

          cl> package
          cl> ????

The CCDRED package will process our data in the same way as we did 
previously.  However, the steps are combined into one task;  and we
can use the information in the headers of the images to drive the task.

The CCDRED package looks for certain keywords and values in the header.  If
the keywords and values have different names than those expected by the 
package then a "translation" file can be used.  The package expects
the keywords IMAGETYP (with values "object", "flat", "zero", among others),
EXPTIME (for dark subtraction), SUBSET (to define the filters), just to 
mention the ones we will be using.  

The task CCDLIST can be used as a check to be sure the package is picking
up the header information correctly.

          cl> imheader m92015 l+      # look for imagetyp, exptime, subset
          cl> unlearn ccdred          # what does this do?
          cl> lpar ccdlist
          cl> ccdlist m92*.imh        # not much there - it should recognize
                                        imagetype and subset, but doesn't
          cl> ccdlist m92*.imh l+     # what does this tell us?

Since this is KPNO data we already have a translation file set up so let's
use it and see what happens.

          cl> setinstrument           # specify the translation file
              ?
              direct

          [now we are automatically put into EPAR mode for the package
           parameters for CCDRED - set the "verbose" parameter to "yes" -
           type :q.]

          [now we are automatically put into EPAR mode for the task parameters
           for CCDPROC - the task that does all of the work.  Look at these
           parameters and see the similarity with the processing steps in
           PATH 1.]
          
          [we do not want to do anything more here for now, so type :q.]

          cl> ccdlist m92*.imh        # do you see a difference?
          cl> type subsets            # subsets was created by ccdlist
          cl> dir ccddb$kpno          # kpno translation files
          cl> type ccddb$kpno/direct.dat
          cl> lpar ccdred

Now the CCDRED package knows about the headers.  Notice that the package
takes care of our pixel type for us as well.  Remember that our pixel
type is "short" but the "pixeltype" parameter will let us control both
the calculation type and output type during processing.  During the
actually processing the input images are overwritten; the "backup" parameter
would let us make copies of the original data first if we wanted.

Biases and flat frames can be combined using the tasks ZEROCOMBINE and 
FLATCOMBINE.  But we will skip these steps since we have data that have already
been combined.  We are now ready to set up the parameters for CCDPROC.
Notice the two parameters called "biassec" and "trimsec".  These are currently
set to "image" - if these keywords have the correct value in the image header
then we need to do nothing.  But closer inspection will show that the values
that we computed earlier are different from the header values.  Run EPAR
and modify the parameters.

           cl> imhead m92015 l+
           cl> epar ccdproc
           cl> lpar ccdproc

This is what I used.

cl> lpar ccdproc
       images = "m92*.imh"      List of CCD images to correct
     (ccdtype = "object")       CCD image type to correct
   (max_cache = 0)              Maximum image caching memory (in Mbytes)
      (noproc = no)             List processing steps only?\n
      (fixpix = no)             Fix bad CCD lines and columns?
    (overscan = yes)            Apply overscan strip correction?
        (trim = yes)            Trim the image?
     (zerocor = yes)            Apply zero level correction?
     (darkcor = no)             Apply dark count correction?
     (flatcor = yes)            Apply flat field correction?
    (illumcor = no)             Apply illumination correction?
   (fringecor = no)             Apply fringe correction?
     (readcor = no)             Convert zero level image to readout correction?
     (scancor = no)             Convert flat field image to scan correction?\n
    (readaxis = "line")         Read out axis (column|line)
     (fixfile = "")             File describing the bad lines and columns
     (biassec = "[335:350,2:510]") Overscan strip image section
     (trimsec = "[1:318,2:510]") Trim data section
        (zero = "")             Zero level calibration image
        (dark = "")             Dark count calibration image
        (flat = "")             Flat field images
       (illum = "")             Illumination correction images
      (fringe = "")             Fringe correction images
  (minreplace = 1.)             Minimum flat field value
    (scantype = "shortscan")    Scan type (shortscan|longscan)
       (nscan = 1)              Number of short scan lines\n
 (interactive = yes)            Fit overscan interactively?
    (function = "chebyshev")    Fitting function
       (order = 1)              Number of polynomial terms or spline pieces
      (sample = "*")            Sample points to fit
    (naverage = 1)              Number of sample points to combine
    (niterate = 1)              Number of rejection iterations
  (low_reject = 3.)             Low sigma rejection factor
 (high_reject = 3.)             High sigma rejection factor
        (grow = 0.)             Rejection growing radius
        (mode = "ql")    

Since the "zero" and "flat" images are in the input list it is not
necessary to specify them.  Try running the task and see what happens.

           cl> ccdproc
           cl> page logfile
           cl> imhead m92*.imh
           cl> imhead m92014 l+    # notice the processing flags in the header

Do not delete these images since they will be used in a later exercise.


-------------------------------------------------------------------------------

                                 References

Type "help ccdred" to see a list of the tasks in this package.  Each task
has an online help page.  Also see the list of "Additional Help Topics".

A User's Guide to CCD Reductions with IRAF, by Phil Massey, February 1997.

There is a "demo" task in the IMRED.CCDRED.CCDTEST package that may be 
instructive to run as well.

---------------------------------end of exercise--------------------------------
